{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constants/weathers.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","constants/api_url.js","services/getUrlWeatherByCity.js","services/transformWeather.js","components/WeatherLocation/index.js","components/LocationList.js","components/ForecastItem/index.js","services/transformForecast.js","components/ForecastExtended.js","App.js","serviceWorker.js","index.js"],"names":["Location","_ref","city","react_default","a","createElement","className","icons","_icons","Object","defineProperty","WeatherTemperature","temperature","weatherState","icon","lib_default","name","size","getWeatherIcon","concat","toFixed","WeatherExtraInfo","humidity","wind","WeatherData","_ref$data","data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","KEY","URL_FORECAST","getUrlWeatherByCity","transformWeather","weather_data","_weather_data$main","main","temp","speed","weather","id","getWeatherState","WeatherLocation","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","handleUpdateClick","API_WEATHER","state","fetch","then","resolve","json","newWeather","setState","_this$state","onWeatherLocationClick","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress_default","Component","LocationList","cities","onSelectedLocation","map","components_WeatherLocation","key","console","log","handleWeatherLocationClick","strToComponents","ForecastItem","weekDay","hour","transformForecast","list","filter","item","moment","unix","dt","utc","format","ForecastExtended","updateCity","componentDidUpdate","prevProps","forecastData","forecast_url","renderProgress","forecast","components_ForecastItem","renderForecastItemDays","App","handleSelectedLocation","react_flexbox_grid_lib","AppBar_default","position","Toolbar_default","Typography_default","variant","color","xs","md","components_LocationList","Paper_default","elevation","components_ForecastExtended","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d86caac.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './styles.css';\r\n\r\n\r\nconst Location = ( {city} ) => {\r\n\r\n    //destructuring//\r\n   // const {city} = props;\r\n\r\n   return ( <div className=\"locationCont\">\r\n                <h1>\r\n                    {city}\r\n                </h1>\r\n            </div> ); \r\n};\r\n\r\nexport default Location;","import React, {Component} from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport {THUNDER, DRIZZLE, SUN ,RAIN ,SNOW , WINDY, CLOUDY } from './../../../constants/weathers';\r\nimport './styles.css';\r\n\r\n\r\nconst icons ={\r\n    [SUN] : \"day-sunny\",\r\n    [CLOUDY]: \"cloudy\",\r\n    [RAIN]: \"rain\",\r\n    [SNOW]: \"snow\",\r\n    [WINDY]: \"windy\",\r\n    [THUNDER]: \"day-thunderstorm\",\r\n    [DRIZZLE]: \"day-showers\",\r\n};\r\n\r\nconst getWeatherIcon = (weatherState) => {\r\n    const icon = icons[weatherState];\r\n\r\n    const sizeIcon = \"4x\";\r\n\r\n    if (icon)\r\n            return <WeatherIcons className=\"wicon\"  name ={ icon } size={sizeIcon}/>;\r\n    else\r\n            return <WeatherIcons className=\"wicon\" name ={\"day-sunny\"} size={sizeIcon}/>;        \r\n};\r\n\r\nconst WeatherTemperature = ({temperature, weatherState}) => (\r\n    <div  className=\"weatherTemperatureCont\">\r\n       {\r\n           getWeatherIcon(weatherState)\r\n        }\r\n        <span className=\"temperature\">{`${temperature.toFixed(0)}`}</span>\r\n        <span className=\"temperatureType\">{`CÂº`}</span>\r\n    </div>\r\n);\r\n\r\nexport default WeatherTemperature;","export const CLOUDY = \"cloudy\";\r\n\r\nexport const SUN = \"sun\";\r\n\r\nexport const RAIN = \"rain\";\r\n\r\nexport const SNOW = \"snow\";\r\n\r\nexport const WINDY = \"windy\";\r\n\r\nexport const THUNDER = \"thunder\";\r\n\r\nexport const DRIZZLE = \"drizzle\";\r\n\r\n","import React, {Component} from 'react';\r\nimport './styles.css';\r\n\r\nconst WeatherExtraInfo = ({humidity , wind }) => (\r\n    <div className=\"weatherExtraInfoCont\">\r\n            <span className=\"extraInfoText\">{` Humedad: ${humidity} % `}</span>\r\n            <span className=\"extraInfoText\">{` Vientos: ${wind}`}</span>\r\n    </div>\r\n);\r\n\r\nexport default WeatherExtraInfo;","import React, {Component} from 'react';\r\nimport WeatherTemperature from './WeatherTemperature';\r\nimport WeatherExtraInfo from './WeatherExtraInfo';\r\nimport './styles.css';\r\n\r\n\r\nconst WeatherData = ({data:{ temperature, weatherState, humidity, wind }}) => {\r\n   return( <div className=\"weatherDataCont\">\r\n        <WeatherTemperature temperature={temperature} weatherState = {weatherState} />     \r\n        <WeatherExtraInfo humidity={humidity} wind={wind}/> \r\n   </div> )\r\n};\r\n\r\nexport default WeatherData;","export const KEY = \"52b76b3f52d59070d4fea53f62bc4977\";\r\nexport const URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\nexport const URL_FORECAST = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n\r\n","import {API_WEATHER} from './../constants/api_url';\r\nimport {KEY, URL} from './../constants/api_url';\r\n\r\n\r\nconst getUrlWeatherByCity = city =>{\r\n    return `${URL}?q=${city}&APPID=${KEY}&units=metric`;\r\n}\r\n\r\nexport default getUrlWeatherByCity;","import {THUNDER, DRIZZLE, SUN ,RAIN ,SNOW , WINDY, CLOUDY } from './../constants/weathers';\r\n\r\nconst getWeatherState = weather => {\r\n        const { id }= weather;\r\n        if(id<300){\r\n            return THUNDER;\r\n        }else if (id<400){\r\n            return DRIZZLE;\r\n        }else if (id<600){\r\n            return RAIN;\r\n        }else if (id<700){\r\n            return SNOW;\r\n        }else if (id===800){\r\n            return SUN;\r\n        }else{\r\n            return CLOUDY;\r\n        }\r\n    }\r\n\r\nconst transformWeather = weather_data =>{\r\n    const { humidity, temp } = weather_data.main;\r\n    const { speed } = weather_data.wind;\r\n    const weatherState = getWeatherState(weather_data.weather[0]);\r\n\r\n    const data = {\r\n        humidity,\r\n        temperature:temp,\r\n        weatherState,\r\n        wind: `${speed} m/s`,\r\n    }\r\n    \r\n    return data;\r\n}\r\n\r\nexport default transformWeather;","import React, {Component} from 'react';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData';\r\nimport './styles.css';\r\nimport getUrlWeatherByCity from './../../services/getUrlWeatherByCity';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport transformWeather from './../../services/transformWeather';\r\n\r\nclass WeatherLocation extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        const {city} = props;\r\n        this.state ={\r\n            city ,\r\n            data: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      this.handleUpdateClick();\r\n    }\r\n  \r\n\r\n    handleUpdateClick = () => {\r\n        const API_WEATHER = getUrlWeatherByCity(this.state.city);\r\n        fetch( API_WEATHER ).then(resolve =>{\r\n            return resolve.json();\r\n        }).then(data =>{\r\n            const newWeather = transformWeather(data);\r\n            this.setState({\r\n                data: newWeather\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n    render (){\r\n        const { city, data } =this.state;\r\n        const {onWeatherLocationClick}=this.props;\r\n        return(\r\n            <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick} >\r\n                <Location city={city}/>  \r\n                { data ? <WeatherData data={data} /> :\r\n                    <CircularProgress size={50}/>\r\n                    }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherLocation;","import React from 'react';\r\nimport WeatherLocation from './WeatherLocation';\r\nimport './styles.css';\r\n\r\n\r\nconst LocationList = ({cities, onSelectedLocation}) =>{\r\n    const handleWeatherLocationClick = city =>{\r\n        console.log(\"handleWeatherLocationClick\");\r\n        onSelectedLocation(city);\r\n    };\r\n    const strToComponents = cities =>(\r\n        cities.map(city => (\r\n        <WeatherLocation \r\n             key = {city}\r\n              city={city}\r\n              onWeatherLocationClick = {()=>handleWeatherLocationClick(city)}/>))\r\n    );\r\n    \r\n   return( <div className=\"locationList\">\r\n        {strToComponents(cities)}\r\n   </div> );\r\n};\r\n\r\nexport default LocationList;\r\n","import React from 'react';\r\nimport WeatherData from '../WeatherLocation/WeatherData';\r\n\r\n\r\nconst ForecastItem = ({weekDay,hour,data}) =>(\r\n    <div>\r\n        <div className=\"text-capitalize\"><h4>{weekDay} - {hour} hs </h4></div>\r\n        <WeatherData data={data}/>\r\n    </div>\r\n    \r\n    \r\n);\r\n\r\nexport default ForecastItem;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport 'moment/locale/es';\r\nimport transformWeather from './transformWeather';\r\n\r\nconst transformForecast = data => (\r\n    data.list.filter(item => (\r\n      moment.unix(item.dt).utc().hour() === 6 ||\r\n      moment.unix(item.dt).utc().hour() === 12 ||\r\n      moment.unix(item.dt).utc().hour() === 18 \r\n    )).map(item =>(\r\n        {\r\n            weekDay: moment.unix(item.dt).format('ddd'),\r\n            hour: moment.unix(item.dt).hour(),\r\n            data: transformWeather(item),\r\n        }\r\n    ))\r\n);\r\n\r\nexport default transformForecast;\r\n","import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport ForecastItem from './ForecastItem';\r\nimport {KEY, URL, URL_FORECAST} from './../constants/api_url';\r\nimport transformForecast from './../services/transformForecast';\r\n\r\n\r\nclass ForecastExtended extends Component {\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            forecastData:null,\r\n        };\r\n    }\r\n    \r\n    componentDidMount = () => {\r\n        this.updateCity(this.props.city);\r\n    }\r\n\r\n    componentDidUpdate = prevProps => {\r\n        if(prevProps.city !== this.props.city){\r\n            console.log(\"prop de ciudad previa\",prevProps.city);\r\n            console.log(\"prop de ciudad actual actualizada en el render\",this.props.city);\r\n            this.setState({forecastData:null});\r\n            this.updateCity(this.props.city);//this.props.ciudad es la que vienen al hacer click y se actualiza cuando entra al render\r\n        }\r\n    }\r\n    \r\n    updateCity = city =>{\r\n        const forecast_url=`${URL_FORECAST}?q=${this.props.city}&appid=${KEY}&units=metric`;\r\n        fetch(forecast_url).then(\r\n            data => (data.json())\r\n        ).then( weather_data =>{\r\n            console.log(weather_data);\r\n            const forecastData = transformForecast(weather_data);\r\n            console.log(forecastData);\r\n            this.setState({forecastData});\r\n        });\r\n    }\r\n\r\n  \r\n    \r\n\r\n    renderForecastItemDays(forecastData) {\r\n     return forecastData.map(forecast => (<ForecastItem \r\n        key={`${forecast.weekDay}${forecast.hour}`} \r\n        weekDay={forecast.weekDay} \r\n        hour={forecast.hour}\r\n        data={forecast.data} />))\r\n    }\r\n    \r\n    renderProgress = () => {\r\n        return <h3>Cargando Pronostico Extendido...</h3>;\r\n    }\r\n\r\n    render(){\r\n        const {city} = this.props;\r\n        const {forecastData}=this.state;\r\n        return(\r\n            <div>\r\n               <h3 className=\"forecast-title\"> PronÃ³stico Extendido para {city} </h3>\r\n                {forecastData ? \r\n                this.renderForecastItemDays(forecastData):\r\n                this.renderProgress()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ForecastExtended;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport LocationList from './components/LocationList';\nimport {Grid, Col, Row} from 'react-flexbox-grid';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport ForecastExtended from './components/ForecastExtended';\n\nconst cities =  [\n  'Munich',\n  'Bogota',\n  'New York',\n  'Barcelona',\n  'Tokyo',\n];\n\n\nclass App extends Component {\n\nconstructor(){\n  super();\n  this.state={\n    city:null,\n  };\n}\n\n  handleSelectedLocation = city => {\n    this.setState({city});\n    console.log(`handleselectionlocation ${city}`);\n  }\n\nrender(){\n    const {city} =this.state;\n  return(\n    <Grid>\n      <Row>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Typography variant=\"title\" color=\"inherit\">\n              Weather App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Row>\n      <Row>\n        <Col xs={12} md={6}>\n          <LocationList cities = {cities} \n        onSelectedLocation ={this.handleSelectedLocation}/>\n        </Col>\n        <Col xs={12} md={6}>\n          <Paper elevation = {4}> \n            <div className=\"details\">\n                 {city && <ForecastExtended city={city}/>}\n            </div>\n          </Paper>  \n        </Col>\n      </Row> \n    </Grid>\n  )\n}\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}